"""
M√ìDULO DE COMANDOS PARA BOT DE TELEGRAM
Este m√≥dulo maneja la conversaci√≥n con el usuario para recolectar datos
y enviarlos a Google Sheets. Utiliza el patr√≥n ConversationHandler de python-telegram-bot.
"""

# Importaciones necesarias para el funcionamiento del bot
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from typing import List
from datetime import datetime  # Importamos datetime para las marcas temporales

# Importaciones propias de la aplicaci√≥n
from utils.google_sheets import append_row  # Funci√≥n para enviar datos a Google Sheets
from config import GOOGLE_SPREADSHEET_ID, GOOGLE_SHEET_NAME  # Configuraci√≥n de la hoja de c√°lculo

# DEFINICI√ìN DE ESTADOS DE LA CONVERSACI√ìN - NUEVO ORDEN
(
    CEDULA,           # Paso 1: C√©dula (Columna C)
    CORREO,           # Paso 2: Correo (Columna D)
    MUNICIPIO,        # Paso 3: Municipio (Columna E)
    PARROQUIA,        # Paso 4: Parroquia (Columna F)
    ENTIDAD,          # Paso 5: Estado (Columna G)
    NODO,             # Paso 6: Nodo (Columna H)
    CARGO,            # Paso 7: Cargo (Columna I)
    SELECCION_PROYECTOS,  # Paso 8: Selecci√≥n de proyectos
    RELLENAR_PROYECTO,    # Paso 9: Rellenar datos de cada proyecto
    CONFIRMAR_PROYECTO,   # Paso 10: Confirmaci√≥n de proyecto individual
    CONFIRMAR_ENVIO,      # Paso 11: Confirmaci√≥n final y env√≠o
) = range(11)  # Asigna n√∫meros del 0 al 10 a cada estado

# OPCIONES PREESTABLECIDAS
ENTIDADES = ["ZULIA"]
MUNICIPIOS = [
  "ALMIRANTE PADILLA", "BARALT", "CABIMAS", "CATATUMBO", "COLON", 
  "FRANCISCO JAVIER PULGAR", "JESUS ENRIQUE LOSSADA", "JESUS MARIA SEMPRUN",
  "LA CA√ëADA DE URDANETA", "LAGUNILLAS", "MACHIQUES DE PERIJA", "MARA",
  "MARACAIBO", "MIRANDA", "PAEZ", "ROSARIO DE PERIJA", "SAN FRANCISCO",
  "SANTA RITA", "SIMON BOLIVAR", "SUCRE", "VALMORES RODRIGUEZ"
]
CARGOS = [
  "COORDINADOR MUNICIPAL",
  "COORDINADOR NODO",
  "SUPERVISOR DE NODO",
  "VERIFICADOR ENCUESTADOR INTEGRAR"
]

# LISTA DE PROYECTOS DISPONIBLES
PROYECTOS = [
    "PROYECTO E.S.C.V. / ACTIVO", "BOLETA GRAN MISI√ìN EQUIDAD Y JUSTICIA SOCIAL", "FLASH POS ELECTORAL / ACTIVO",
    "PROYECTO CANASTA TIPOLOG√çA ABASTOS Y BODEGAS 2025 / ACTIVO", "ENCUESTA INDUSTRIAL CUALITATIVA EN √ÅMBITOS INDUSTRIALES - EN PLANIFICACI√ìN /APENAS SE ACTIVE SE REPORTA LA INFORMACI√ìN", "REGISTRO DE INFRAESTRUCTURAS EDUCATIVAS / ACTIVO",
    "ACTUALIZACI√ìN DE LADO DE MANZANAS Y COMUNIDADES EN - EN PLANIFICACI√ìN /APENAS SE ACTIVE SE REPORTA LA INFORMACI√ìN", "CATASTRO", "INPC"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Funci√≥n inicial que comienza la conversaci√≥n.
    """
    context.user_data.clear()
    await update.message.reply_text("üëã Bienvenido.\n\nü™™ Ingrese la C√âDULA DE IDENTIDAD:")
    return CEDULA

async def cedula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Maneja el ingreso de c√©dula (Columna C).
    """
    context.user_data["CEDULA"] = update.message.text
    await update.message.reply_text("üìß Ingrese su CORREO ELECTR√ìNICO:")
    return CORREO

async def correo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Maneja el ingreso de correo (Columna D).
    """
    context.user_data["CORREO"] = update.message.text
    
    # Preparar selecci√≥n de municipio
    keyboard = [[InlineKeyboardButton(m, callback_data=m)] for m in MUNICIPIOS]
    keyboard.append([InlineKeyboardButton("‚úÖ Done", callback_data="done")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    context.user_data["MUNICIPIO"] = None
    await update.message.reply_text("üèô Seleccione el MUNICIPIO:", reply_markup=reply_markup)
    return MUNICIPIO

async def municipio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Maneja la selecci√≥n de municipio (Columna E).
    """
    query = update.callback_query
    await query.answer()

    if query.data == "done":
        if not context.user_data["MUNICIPIO"]:
            await query.edit_message_text("‚ö†Ô∏è Debe seleccionar un MUNICIPIO.")
            return MUNICIPIO
        await query.edit_message_text(f"‚úÖ MUNICIPIO: {context.user_data['MUNICIPIO']}\n\nüèô Ingrese la PARROQUIA:")
        return PARROQUIA
    else:
        context.user_data["MUNICIPIO"] = query.data
        keyboard = [[InlineKeyboardButton(m, callback_data=m)] for m in MUNICIPIOS]
        keyboard.append([InlineKeyboardButton("‚úÖ Done", callback_data="done")])
        await query.edit_message_text(
            f"üëâ MUNICIPIO seleccionado: {query.data}\nPresione ‚úÖ Done para continuar.",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        return MUNICIPIO

async def parroquia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Maneja el ingreso de parroquia (Columna F).
    """
    context.user_data["PARROQUIA"] = update.message.text
    
    # Preparar selecci√≥n de entidad (estado)
    keyboard = [[InlineKeyboardButton(ent, callback_data=ent)] for ent in ENTIDADES]
    keyboard.append([InlineKeyboardButton("‚úÖ Done", callback_data="done")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    context.user_data["ENTIDAD"] = None
    await update.message.reply_text("üèõ Seleccione la ENTIDAD/ESTADO:", reply_markup=reply_markup)
    return ENTIDAD

async def entidad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Maneja la selecci√≥n de entidad/estado (Columna G).
    """
    query = update.callback_query
    await query.answer()

    if query.data == "done":
        if not context.user_data["ENTIDAD"]:
            await query.edit_message_text("‚ö†Ô∏è Debe seleccionar una ENTIDAD.")
            return ENTIDAD
        await query.edit_message_text(f"‚úÖ ENTIDAD: {context.user_data['ENTIDAD']}\n\nüèò Ingrese el NODO:")
        return NODO
    else:
        context.user_data["ENTIDAD"] = query.data
        keyboard = [[InlineKeyboardButton(ent, callback_data=ent)] for ent in ENTIDADES]
        keyboard.append([InlineKeyboardButton("‚úÖ Done", callback_data="done")])
        await query.edit_message_text(
            f"üëâ ENTIDAD seleccionada: {query.data}\nPresione ‚úÖ Done para continuar.",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        return ENTIDAD

async def nodo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Maneja el ingreso de nodo (Columna H).
    """
    context.user_data["NODO"] = update.message.text
    
    # Preparar selecci√≥n de cargo
    keyboard = [[InlineKeyboardButton(c, callback_data=c)] for c in CARGOS]
    keyboard.append([InlineKeyboardButton("‚úÖ Done", callback_data="done")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    context.user_data["CARGO"] = None
    await update.message.reply_text("üëî Seleccione el CARGO:", reply_markup=reply_markup)
    return CARGO

async def cargo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Maneja la selecci√≥n de cargo (Columna I).
    """
    query = update.callback_query
    await query.answer()

    if query.data == "done":
        if not context.user_data["CARGO"]:
            await query.edit_message_text("‚ö†Ô∏è Debe seleccionar un CARGO.")
            return CARGO
        
        # Ir a selecci√≥n de proyectos
        context.user_data["selected_projects"] = []
        keyboard = []
        for proy in PROYECTOS:
            keyboard.append([InlineKeyboardButton(proy, callback_data=proy)])
        keyboard.append([InlineKeyboardButton("‚úÖ Done", callback_data="done")])
        await query.edit_message_text(
            "‚úîÔ∏è Datos b√°sicos completados.\n\nüìå Seleccione los proyectos en los que participa (puede elegir varios) y luego pulse ‚úÖ Done.",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        return SELECCION_PROYECTOS
    else:
        context.user_data["CARGO"] = query.data
        keyboard = [[InlineKeyboardButton(c, callback_data=c)] for c in CARGOS]
        keyboard.append([InlineKeyboardButton("‚úÖ Done", callback_data="done")])
        await query.edit_message_text(
            f"üëâ CARGO seleccionado: {query.data}\nPresione ‚úÖ Done para continuar.",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        return CARGO

async def seleccionar_proyectos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la selecci√≥n m√∫ltiple de proyectos."""
    query = update.callback_query
    await query.answer()
    seleccion = query.data

    if seleccion == "done":
        proyectos = context.user_data["selected_projects"]
        if not proyectos:
            await query.edit_message_text("‚ö†Ô∏è Debe seleccionar al menos un proyecto.")
            return SELECCION_PROYECTOS

        context.user_data["current_project_index"] = 0
        await query.edit_message_text(
            f"‚úçÔ∏è Vamos con *{proyectos[0]}*.\n\nIngrese la SEMANA:",
            parse_mode="Markdown"
        )
        return RELLENAR_PROYECTO
    else:
        if seleccion in context.user_data["selected_projects"]:
            context.user_data["selected_projects"].remove(seleccion)
        else:
            context.user_data["selected_projects"].append(seleccion)

        keyboard = []
        for proy in PROYECTOS:
            marca = "‚úÖ " if proy in context.user_data["selected_projects"] else ""
            keyboard.append([InlineKeyboardButton(marca + proy, callback_data=proy)])
        keyboard.append([InlineKeyboardButton("‚úÖ Done", callback_data="done")])

        await query.edit_message_text(
            "üìå Seleccione los proyectos en los que participa:\n\n" +
            ", ".join(context.user_data["selected_projects"]) if context.user_data["selected_projects"] else "Ninguno a√∫n",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECCION_PROYECTOS

async def rellenar_proyecto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja el ingreso de datos para cada proyecto seleccionado."""
    proyectos = context.user_data["selected_projects"]
    idx = context.user_data["current_project_index"]
    proyecto = proyectos[idx]

    if "proyectos_data" not in context.user_data:
        context.user_data["proyectos_data"] = {}

    if proyecto not in context.user_data["proyectos_data"]:
        context.user_data["proyectos_data"][proyecto] = {}

    data_proy = context.user_data["proyectos_data"][proyecto]

    # Nuevo orden: Semana -> Segmentos -> Manzanas -> Encuestas
    if "SEMANA" not in data_proy:
        data_proy["SEMANA"] = update.message.text
        await update.message.reply_text("Ingrese los SEGMENTOS TRABAJADOS:")
        return RELLENAR_PROYECTO

    elif "SEGMENTOS" not in data_proy:
        data_proy["SEGMENTOS"] = update.message.text
        await update.message.reply_text("Ingrese las MANZANAS TRABAJADAS:")
        return RELLENAR_PROYECTO

    elif "MANZANAS" not in data_proy:
        data_proy["MANZANAS"] = update.message.text
        await update.message.reply_text("Ingrese la CANTIDAD DE ENCUESTAS:")
        return RELLENAR_PROYECTO

    elif "ENCUESTAS" not in data_proy:
        data_proy["ENCUESTAS"] = update.message.text
        
        # Mostrar resumen y pedir confirmaci√≥n para este proyecto
        resumen = f"""
üìã *Resumen de {proyecto}:*
        
üóì *Semana:* {data_proy['SEMANA']}
üìç *Segmentos:* {data_proy['SEGMENTOS']}
üèò *Manzanas:* {data_proy['MANZANAS']}
üìä *Encuestas:* {data_proy['ENCUESTAS']}

¬øLos datos son correctos? (si/no)
Si hay alg√∫n error, responde 'no' para volver a llenar este proyecto.
        """
        
        await update.message.reply_text(resumen, parse_mode="Markdown")
        return CONFIRMAR_PROYECTO

async def confirmar_proyecto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la confirmaci√≥n o correcci√≥n de cada proyecto individual."""
    respuesta = update.message.text.lower()
    proyectos = context.user_data["selected_projects"]
    idx = context.user_data["current_project_index"]
    proyecto = proyectos[idx]
    
    if respuesta == 'si':
        # Proyecto confirmado, pasar al siguiente
        idx += 1
        if idx < len(proyectos):
            context.user_data["current_project_index"] = idx
            await update.message.reply_text(
                f"‚úÖ *{proyecto}* confirmado.\n\nAhora vamos con *{proyectos[idx]}*.\nIngrese la SEMANA:",
                parse_mode="Markdown"
            )
            return RELLENAR_PROYECTO
        else:
            # Todos los proyectos completados y confirmados
            await mostrar_resumen_final(update, context)
            return CONFIRMAR_ENVIO
            
    elif respuesta == 'no':
        # Volver a llenar el mismo proyecto
        del context.user_data["proyectos_data"][proyecto]  # Eliminar datos incorrectos
        await update.message.reply_text(
            f"üîÑ Vamos a corregir *{proyecto}*.\n\nIngrese la SEMANA:",
            parse_mode="Markdown"
        )
        return RELLENAR_PROYECTO
        
    else:
        await update.message.reply_text("‚ùå Por favor, responda 'si' o 'no'.")
        return CONFIRMAR_PROYECTO

async def mostrar_resumen_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra un resumen final de todos los datos antes del env√≠o."""
    user_data = context.user_data
    proyectos_data = user_data.get("proyectos_data", {})
    
    resumen = "üìã *RESUMEN FINAL DE TODOS LOS DATOS*\n\n"
    
    # Datos b√°sicos
    resumen += f"*üë§ Datos Personales:*\n"
    resumen += f"ü™™ C√©dula: {user_data.get('CEDULA', '')}\n"
    resumen += f"üìß Correo: {user_data.get('CORREO', '')}\n"
    resumen += f"üèô Municipio: {user_data.get('MUNICIPIO', '')}\n"
    resumen += f"üèò Parroquia: {user_data.get('PARROQUIA', '')}\n"
    resumen += f"üèõ Estado: {user_data.get('ENTIDAD', '')}\n"
    resumen += f"üìç Nodo: {user_data.get('NODO', '')}\n"
    resumen += f"üëî Cargo: {user_data.get('CARGO', '')}\n\n"
    
    # Proyectos
    resumen += f"*üìä Proyectos seleccionados ({len(user_data.get('selected_projects', []))}):*\n"
    for proyecto in user_data.get("selected_projects", []):
        data = proyectos_data.get(proyecto, {})
        resumen += f"üîπ *{proyecto}:*\n"
        resumen += f"   üóì Semana: {data.get('SEMANA', '')}\n"
        resumen += f"   üìç Segmentos: {data.get('SEGMENTOS', '')}\n"
        resumen += f"   üèò Manzanas: {data.get('MANZANAS', '')}\n"
        resumen += f"   üìä Encuestas: {data.get('ENCUESTAS', '')}\n\n"
    
    resumen += "¬øDesea confirmar y enviar TODOS los datos? (si/no)\n"
    resumen += "‚ö†Ô∏è *Una vez enviados, no podr√°n modificarse*"
    
    await update.message.reply_text(resumen, parse_mode="Markdown")

async def confirmar_envio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la confirmaci√≥n final y env√≠o de todos los datos."""
    if update.message.text.lower() == "si":
        try:
            row = _build_google_row(context)
            append_row(
                spreadsheet_id=GOOGLE_SPREADSHEET_ID,
                sheet_name=GOOGLE_SHEET_NAME,
                row_values=row,
            )
            await update.message.reply_text("‚úÖ üì§ *Datos enviados con √©xito a Google Sheets.*", parse_mode="Markdown")
        except Exception as e:
            await update.message.reply_text(f"‚ùå *Error enviando a Google Sheets:* {e}", parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ùå Proceso cancelado. Los datos no fueron enviados.")
    
    return ConversationHandler.END

def _build_google_row(context: ContextTypes.DEFAULT_TYPE) -> List[str]:
    """
    Construye una fila con los datos del usuario en el nuevo formato para Google Sheets.
    """
    user_data = context.user_data
    now = datetime.now()
    
    # Datos autom√°ticos (columnas A-B)
    automaticos = [
        now.strftime("%Y-%m-%d %H:%M:%S"),  # Columna A - Marca temporal
        now.strftime("%Y-%m-%d"),           # Columna B - Fecha de levantamiento
    ]
    
    # Datos b√°sicos del usuario (columnas C-I) - Mismo orden que la conversaci√≥n
    basicos = [
        user_data.get("CEDULA", ""),        # Columna C - C√âDULA DE IDENTIDAD
        user_data.get("CORREO", ""),        # Columna D - CORREO ELECTRONICO
        user_data.get("MUNICIPIO", ""),     # Columna E - MUNICIPIO
        user_data.get("PARROQUIA", ""),     # Columna F - PARROQUIA
        user_data.get("ENTIDAD", ""),       # Columna G - ESTADO
        user_data.get("NODO", ""),          # Columna H - NODO
        user_data.get("CARGO", ""),         # Columna I - CARGO
    ]
    
    # Datos de proyectos (columnas J-AS)
    proyectos_cols: List[str] = []
    selected: List[str] = user_data.get("selected_projects", [])
    data: dict = user_data.get("proyectos_data", {})
    
    for i in range(1, 10):
        nombre = f"Proyecto {i}"
        if nombre in selected and nombre in data:
            d = data.get(nombre, {})
            proyectos_cols.extend([
                d.get("SEMANA", ""),        # Semana
                d.get("SEGMENTOS", ""),     # Segmentos trabajados
                d.get("MANZANAS", ""),      # Manzanas trabajadas
                d.get("ENCUESTAS", ""),     # Cantidad de encuestas
            ])
        else:
            proyectos_cols.extend(["", "", "", ""])

    return automaticos + basicos + proyectos_cols

# Manejador de conversaci√≥n que agrupa todos los estados y handlers
def get_conv_handler() -> ConversationHandler:
    """
    Crea y configura el manejador de conversaci√≥n con todos los estados –∏ handlers.
    """
    return ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            # Nuevo orden de estados seg√∫n las columnas
            CEDULA: [MessageHandler(filters.TEXT & ~filters.COMMAND, cedula)],
            CORREO: [MessageHandler(filters.TEXT & ~filters.COMMAND, correo)],
            MUNICIPIO: [CallbackQueryHandler(municipio)],
            PARROQUIA: [MessageHandler(filters.TEXT & ~filters.COMMAND, parroquia)],
            ENTIDAD: [CallbackQueryHandler(entidad)],
            NODO: [MessageHandler(filters.TEXT & ~filters.COMMAND, nodo)],
            CARGO: [CallbackQueryHandler(cargo)],
            SELECCION_PROYECTOS: [CallbackQueryHandler(seleccionar_proyectos)],
            RELLENAR_PROYECTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, rellenar_proyecto)],
            CONFIRMAR_PROYECTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmar_proyecto)],
            CONFIRMAR_ENVIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmar_envio)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_chat=True,
        per_user=True,
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la cancelaci√≥n de la conversaci√≥n."""
    await update.message.reply_text("Operaci√≥n cancelada.")
    return ConversationHandler.END
    """
    Maneja la cancelaci√≥n de la conversaci√≥n.
    """
    await update.message.reply_text("Operaci√≥n cancelada.")
    return ConversationHandler.END  # Terminar la conversaci√≥n